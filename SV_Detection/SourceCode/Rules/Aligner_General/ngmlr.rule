import sys
import os
import glob
sys.path.insert(0, '/scratch/lix33/lxwg/SourceCode/PacbioSV/SourceCode/Scripts')
from RunPacbioSV import *

configfile: "../../Configs/pacbioSV.yaml"
workdir: os.environ['PWD']
shell.executable('bash')

# Get reference
strRef = config["General"]["ref"]


# Rules
# rule bam2fastq:
#     input: 
#         lambda wildcards: config[wildcards.wcReadsType]["rawReads" + wildcards.readsIndex]
#     output:
#         strBAMDir + "/ngmlr/v37/{wcReadsType}/Tmp/rawReads{readsIndex}.fastq"
#     shell:
#         "bedtools bamtofastq -i {input} -fq {output}"
         
rule ngmlr_alignment:
    input:
        buidDir + "/{wcCurBuildName}/Sample/{wcCurSampleName}/Fastq/{wcCurSampleName}_hifi_reads.fastq.gz"
    output:        
        buidDir + "/{wcCurBuildName}/BAM/{wcRefVersion}/NGMLR/{wcCurSampleName}_hifi.sam"  
    threads:
        24
    params:
        ref = strRef
    log:
        buidDir + "/{wcCurBuildName}/Log/Align/{wcRefVersion}/NGMLR/{wcCurSampleName}_ngmlr.log"
    benchmark:
        buidDir + "/{wcCurBuildName}/Benchmark/Align/{wcRefVersion}/NGMLR/{wcCurSampleName}_ngmlr.benchmark.txt"            
    shell:
        "ngmlr -t {threads} -r {params.ref} -q {input} -o {output}"

rule ngmlr_sam2bam:
    input:
        rules.ngmlr_alignment.output
    output:
        buidDir + "/{wcCurBuildName}/BAM/{wcRefVersion}/NGMLR/{wcCurSampleName}_hifi.bam"
    threads:
        24
    shell:
        """
        samtools view -@ {threads} -S -b {input} > {output}
        rm {input}
        """

#rule ngmlr_mergeBAM:
#    input:        
#        vBAM = lambda wildcards: expand(strBAMDir + "/ngmlr/v37/" + wildcards.wcReadsType + "/Tmp/rawReads{index}.bam", index = dictReadsIndex[wildcards.wcReadsType])
#    output:
#        strBAMDir + "/ngmlr/v37/{wcReadsType}/{wcReadsType}.HG002.bam"         
#    threads:
#        32
#    log:
#        strBAMDir + "/ngmlr/v37/{wcReadsType}/Log/{wcReadsType}.HG002.log"
#    shell:
#        "samtools merge -@ {threads} -f {output} {input.vBAM}"

rule ngmlr_addRG:
    input:        
        rules.ngmlr_sam2bam.output
    output:
        buidDir + "/{wcCurBuildName}/BAM/{wcRefVersion}/NGMLR/{wcCurSampleName}_hifi.RG.bam"         
    threads:
        12
    log:
        buidDir + "/{wcCurBuildName}/Log/Align/{wcRefVersion}/NGMLR/{wcCurSampleName}_ngmlr.RG.log"
    shell:        
        """
        samtools addreplacerg -@ {threads} -r '@RG\tID:Pacbio\tSM:WGS' -o {output} {input}
        rm {input}
        """             

rule ngmlr_sortBAM:
    input:
        rules.ngmlr_addRG.output
    output:
        buidDir + "/{wcCurBuildName}/BAM/{wcRefVersion}/NGMLR/{wcCurSampleName}_hifi.RG.MD.sorted.bam"        
    threads:
        24
    shell:
        """
        samtools sort -@ {threads} -o {output} {input}
        rm {input}
        """

rule ngmlr_buildSortedIndex:
    input:
        rules.ngmlr_sortBAM.output
    output:
        buidDir + "/{wcCurBuildName}/BAM/{wcRefVersion}/NGMLR/{wcCurSampleName}_hifi.RG.MD.sorted.bam.bai"
    threads:
        24
    shell:
        "samtools index -@ {threads} {input} {output}"
        