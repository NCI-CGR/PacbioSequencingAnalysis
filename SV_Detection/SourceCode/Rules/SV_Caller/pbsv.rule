import sys
import os
sys.path.insert(0, '/scratch/lix33/lxwg/SourceCode/PacbioSV/SourceCode/Scripts')
from RunPacbioSV import *

configfile: "../../Configs/benchmarkTest.yaml"
workdir: os.environ['PWD']
shell.executable('bash')

# Get general dir
svRootDir = config["GeneralInfo"]["svDir"]
refSeq = config["GeneralInfo"]["ref"]
svTrueSet= config["GeneralInfo"]["svTrueSet"]

bamRootDir = config["GeneralInfo"]["bamDir"]
#bamRootDir = "/scratch/lix33/Test/Debug/snakemake"

dicKWMD = {"ngmlr": "MD.", "pbmm2": "MD."}

def GetSortedBAM(wcs):
    if wcs.wcAligner == "ngmlr":
        sortedBam = bamRootDir + "/{wcAligner}/{wcRefVersion}/{wcReadsType}/{wcReadsType}.HG002.MD.sorted.bam"
    else:
        sortedBam = bamRootDir + "/{wcAligner}/{wcRefVersion}/{wcReadsType}/{wcReadsType}.HG002.sorted.bam"
    return sortedBam

rule pbsv_discover:
    input:
        bam = bamRootDir + "/{wcAligner}/{wcRefVersion}/{wcReadsType}/{wcReadsType}.HG002.MD.sorted.bam"
    output:
        svsigFile = svRootDir + "/{wcRefVersion}/pbsv/{wcAligner}/{wcReadsType}/discover/{wcReadsType}.HG002.MD.sorted.svsig.gz", 
    log: 
        svRootDir + "/{wcRefVersion}/pbsv/{wcAligner}/{wcReadsType}/discover/Log/{wcReadsType}.HG002.MD.sorted.log"
    benchmark: 
        svRootDir + "/{wcRefVersion}/pbsv/{wcAligner}/{wcReadsType}/discover/Benchmark/{wcReadsType}.HG002.MD.sorted.benchmark"
    params:        
        loglevel = "INFO",
        mgcPerc = 97.0,
        tr_bed = config["GeneralInfo"]["tr_bed"]
    shell:
        """
        pbsv discover --log-level {params.loglevel} \
                      --min-gap-comp-id-perc {params.mgcPerc} \
                      --tandem-repeats {params.tr_bed} \
                      {input.bam} {output} > {log} 2>&1
        """

rule pbsv_call:
    input:        
        svsigs = rules.pbsv_discover.output,
        reference = refSeq
    output: 
        vcf = svRootDir + "/{wcRefVersion}/pbsv/{wcAligner}/{wcReadsType}/minReads_{wcMinReads}/{wcReadsType}.HG002.MD.sorted.{wcMinReads}.pbsv.vcf",
    log: 
        svRootDir + "/{wcRefVersion}/pbsv/{wcAligner}/{wcReadsType}/minReads_{wcMinReads}/Log/{wcReadsType}.HG002.MD.sorted.{wcMinReads}.pbsv.log"
    benchmark: 
        svRootDir + "/{wcRefVersion}/pbsv/{wcAligner}/{wcReadsType}/minReads_{wcMinReads}/Benchmark/{wcReadsType}.HG002.MD.sorted.{wcMinReads}.pbsv.benchmark"
    params:
        extra = "--ccs -m 20 -A 3 -O 3",
        loglevel = "INFO",
        minReads = lambda wildcards: wildcards.wcMinReads
    threads: 
        24
    message: "Executing {rule}: Calling structural variants from SVSIGs: {input.svsigs}"
    shell:
        """
        pbsv call {params.extra} \
                  --log-level {params.loglevel} \
                  --num-threads {threads} \
                  --call-min-reads-per-strand-all-samples {params.minReads} \
                  {input.reference} {input.svsigs} {output} > {log} 2>&1
        """

rule pbsv_truvari:
    input:
        svCallSet = rules.pbsv_call.output
    output:
        cmpSummaryFile = svRootDir + "/{wcRefVersion}/pbsv/{wcAligner}/{wcReadsType}/minReads_{wcMinReads}/Output_Benchmark_Cmp/summary.txt"
    params:
        reference = refSeq,
        trueSet = svTrueSet,
        bgzipDir = svRootDir + "/{wcRefVersion}/pbsv/{wcAligner}/{wcReadsType}/minReads_{wcMinReads}/Bgzip",
        bgZipSVCallSet = svRootDir + "/{wcRefVersion}/pbsv/{wcAligner}/{wcReadsType}/minReads_{wcMinReads}/Bgzip/{wcReadsType}.HG002.MD.sorted.{wcMinReads}.pbsv.vcf.gz",
        compOutDir = svRootDir + "/{wcRefVersion}/pbsv/{wcAligner}/{wcReadsType}/minReads_{wcMinReads}/Output_Benchmark_Cmp"
    log:
        svRootDir + "/{wcRefVersion}/pbsv/{wcAligner}/{wcReadsType}/minReads_{wcMinReads}/Log/{wcReadsType}.HG002.MD.sorted.{wcMinReads}.pbsv_truvari.log"
    shell:
        """
        #1: Create a separate folder to save the bgzip file
        echo "1: Create a separate folder to save the bgzip file" 
        mkdir -p {params.bgzipDir}
        echo
        
        #2: Compress vcf file by using bgzip and save it into the bgzip folder
        echo "2: Compress vcf file by using bgzip and save it into the bgzip folder"
        cat <(cat {input.svCallSet} | grep "^#") \
            <(cat {input.svCallSet} | grep -vE "^#" | \
            grep 'DUP\|INS\|DEL' | sed 's/DUP/INS/g' | sort -k1,1 -k2,2g) \
            | bgzip -c > {params.bgZipSVCallSet}
        echo
        
        #3: Build bgzip Index file
        echo "3: Build bgzip Index file"
        tabix {params.bgZipSVCallSet} 
        echo

        #4: Remove existing output Dir
        echo "4: Remove existing output Dir"
        rm -rf {params.compOutDir}
        echo
        
        #5: Run truvari
        echo "5: Run truvari"
        truvari bench \
                -b {params.trueSet} \
                -c {params.bgZipSVCallSet} \
                -f {params.reference} \
                -o {params.compOutDir} > {log} 2>&1
        """

#rule bcftools_concat_pbsv_vcf:
#    input:
#        calls = expand(f"samples/{sample}/pbsv/{sample}.{ref}.chrom_vcfs/{sample}.{ref}.{{region}}.pbsv.vcf.gz", region=all_chroms),
#        indices = expand(f"samples/{sample}/pbsv/{sample}.{ref}.chrom_vcfs/{sample}.{ref}.{{region}}.pbsv.vcf.gz.tbi", region=all_chroms)
#    output: f"samples/{sample}/pbsv/{sample}.{ref}.pbsv.vcf"
#    log: f"samples/{sample}/logs/bcftools/concat/{sample}.{ref}.pbsv.vcf.log"
#    benchmark: f"samples/{sample}/benchmarks/bcftools/concat/{sample}.{ref}.pbsv.vcf.tsv"
#    conda: "envs/bcftools.yaml"
#    message: "Executing {rule}: Concatenating pbsv VCFs: {input.calls}"
#    shell: "(bcftools concat -a -o {output} {input.calls}) > {log} 2>&1"
        