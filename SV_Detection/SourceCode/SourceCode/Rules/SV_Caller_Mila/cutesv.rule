import sys
import os
sys.path.insert(0, '/scratch/lix33/lxwg/SourceCode/PacbioSV/SourceCode/Scripts')
from RunPacbioSV import *

configfile: "../../Configs/MilaTesting.yaml"
workdir: os.environ['PWD']
shell.executable('bash')


svRootDir = config["GeneralInfo"]["svDir"]
refSeq = config["GeneralInfo"]["ref"]

bamRootDir = config["GeneralInfo"]["bamDir"]
#bamRootDir = "/scratch/lix33/Test/Debug/snakemake"

print("This is cuteSV SMK ----->")
os.system("cuteSV --version")
    

dicKWMD = {"ngmlr": "MD.", "pbmm2": "MD."}

rule cuteSV_call:
    input:
        bam = bamRootDir + "/{wcAligner}/{wcRefVersion}/{wcSampleID}/{wcSampleID}.MD.sorted.bam"        
    output:
        vcf = svRootDir + "/{wcRefVersion}/cuteSV/{wcAligner}/{wcSampleID}/minSupport_{wcMinSupportCuteSV}/{wcSampleID}.MD.sorted.{wcMinSupportCuteSV}.cuteSV.vcf"            
    params:
        workDir = svRootDir + "/{wcRefVersion}/cuteSV/{wcAligner}/{wcSampleID}/minSupport_{wcMinSupportCuteSV}/{wcAligner}_Mid_File",
        ms = lambda wildcards: wildcards.wcMinSupportCuteSV,
        ref = refSeq,
        mcbINS = 1000,
        drmINS = 0.9,
        mcbDEL = 1000,
        drmDEL = 0.5        
    threads:
        12
    log:
        svRootDir + "/{wcRefVersion}/cuteSV/{wcAligner}/{wcSampleID}/minSupport_{wcMinSupportCuteSV}/Log/{wcSampleID}.MD.sorted.{wcMinSupportCuteSV}.cuteSV.log"
    benchmark:
        svRootDir + "/{wcRefVersion}/cuteSV/{wcAligner}/{wcSampleID}/minSupport_{wcMinSupportCuteSV}/Benchmark/{wcSampleID}.MD.sorted.{wcMinSupportCuteSV}.cuteSV.benchmark"
    run:
        shell("mkdir -p {params.workDir}")
        
        shell("(cuteSV {input.bam} {params.ref} {output.vcf} {params.workDir} \
                --threads {threads} \
                --genotype \
                --min_support {params.ms} \
                --max_cluster_bias_INS {params.mcbINS} \
                --diff_ratio_merging_INS {params.drmINS} \
                --max_cluster_bias_DEL {params.mcbDEL} \
                --diff_ratio_merging_DEL {params.drmDEL}) > {log} 2>&1")